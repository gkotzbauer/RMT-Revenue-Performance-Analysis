import { HealthcareAnalyzer } from "./analyzer.js"; import { UIManager } from "./ui-manager.js"; import { ChartManager } from "./charts.js"; import { ExportManager } from "./export.js"; import { formatCurrency, formatPercentage } from "./utils.js"; export class HealthcareRevenueApp { constructor() { console.log("🏗️ Starting HealthcareRevenueApp constructor..."); try { this.analyzer = new HealthcareAnalyzer(); this.uiManager = new UIManager(); this.chartManager = new ChartManager(); this.exportManager = new ExportManager(); this.currentData = null; this.analysisResults = null; console.log("✅ All components created successfully"); this.init(); } catch (error) { console.error("❌ Constructor error:", error); this.showConstructorError(error); } } init() { console.log("🏥 Initializing RMT Healthcare Revenue Analysis Tool"); try { const requiredLibraries = { "XLSX": typeof XLSX !== "undefined", "Chart": typeof Chart !== "undefined", "lodash (_)": typeof _ !== "undefined" }; console.log("📚 Library availability check:", requiredLibraries); const missingLibraries = Object.entries(requiredLibraries).filter(([name, available]) => !available).map(([name]) => name); if (missingLibraries.length > 0) { throw new Error(`Missing required libraries: ${missingLibraries.join(", ")}`); } console.log("🎨 Initializing UI Manager..."); this.uiManager.init(); console.log("📊 Initializing Chart Manager..."); this.chartManager.init(); console.log("📋 Initializing Export Manager..."); this.exportManager.init(); console.log("🔗 Binding events..."); this.bindEvents(); this.showWelcomeMessage(); console.log("✅ Application initialized successfully"); } catch (error) { console.error("❌ Initialization error:", error); this.showError("Initialization Failed", error.message); } } }
bindEvents() { console.log("🔗 Binding events..."); const fileInput = document.getElementById("fileInput"); const uploadArea = document.getElementById("uploadArea"); const runAnalysisBtn = document.getElementById("runAnalysisBtn"); const resetBtn = document.getElementById("resetBtn"); if (fileInput) { fileInput.addEventListener("change", (e) => { console.log("📁 File input changed:", e.target.files); this.handleFileSelect(e); }); console.log("✅ File input event bound"); } if (uploadArea) { uploadArea.addEventListener("click", () => { console.log("🖱️ Upload area clicked"); fileInput?.click(); }); uploadArea.addEventListener("dragover", (e) => this.handleDragOver(e)); uploadArea.addEventListener("drop", (e) => this.handleFileDrop(e)); console.log("✅ Upload area events bound"); } if (runAnalysisBtn) { runAnalysisBtn.addEventListener("click", () => { console.log("🚀 Analysis button clicked"); this.runAnalysis(); }); console.log("✅ Analysis button event bound"); } if (resetBtn) { resetBtn.addEventListener("click", () => { console.log("🔄 Reset button clicked"); this.resetApplication(); }); } const exportCsvBtn = document.getElementById("exportCsvBtn"); const exportPdfBtn = document.getElementById("exportPdfBtn"); if (exportCsvBtn) { exportCsvBtn.addEventListener("click", () => { console.log("📋 CSV export clicked"); this.exportResults("csv"); }); } if (exportPdfBtn) { exportPdfBtn.addEventListener("click", () => { console.log("📄 PDF export clicked"); this.exportResults("pdf"); }); } const navTabs = document.querySelectorAll(".nav-tab"); navTabs.forEach(tab => { tab.addEventListener("click", (e) => { console.log(`�� Tab clicked: ${e.target.dataset.tab}`); this.switchTab(e.target.dataset.tab); }); }); console.log("✅ All events bound successfully"); }
showWelcomeMessage() { this.uiManager.showStatus("Welcome to RMT Healthcare Revenue Analysis. Upload your Excel file to begin.", "info"); } handleFileSelect(event) { const file = event.target.files[0]; if (file) { this.processFile(file); } } handleDragOver(event) { event.preventDefault(); event.stopPropagation(); const uploadArea = document.getElementById("uploadArea"); uploadArea?.classList.add("dragover"); } handleFileDrop(event) { event.preventDefault(); event.stopPropagation(); const uploadArea = document.getElementById("uploadArea"); uploadArea?.classList.remove("dragover"); const file = event.dataTransfer.files[0]; if (file) { this.processFile(file); } } async processFile(file) { console.log("📄 Processing file:", file.name); try { if (!this.validateFileType(file)) { throw new Error("Invalid file type. Please upload an Excel file (.xlsx or .xls)"); } this.uiManager.showStatus("Processing file...", "info"); const data = await this.readFile(file); this.currentData = data; this.uiManager.showStatus("File loaded successfully. Click \"Run Analysis\" to begin.", "success"); document.getElementById("runAnalysisBtn").disabled = false; } catch (error) { console.error("❌ File processing error:", error); this.uiManager.showStatus(`Error: ${error.message}`, "error"); } } validateFileType(file) { const validTypes = [ "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.ms-excel" ]; return validTypes.includes(file.type); } async runAnalysis() { if (!this.currentData) { this.uiManager.showStatus("Please upload a file first.", "error"); return; } this.uiManager.showStatus("Running analysis...", "info"); try { this.analysisResults = this.analyzer.analyze(this.currentData); this.updateDataTables(this.analysisResults); this.chartManager.updateCharts(this.analysisResults); this.uiManager.showStatus("Analysis complete!", "success"); } catch (error) { console.error("Analysis error:", error); this.uiManager.showStatus("Error during analysis: " + error.message, "error"); } } updateDataTables(results) { const insightsTableBody = document.getElementById("insightsTableBody"); if (insightsTableBody) { insightsTableBody.innerHTML = ""; results.finalResults.slice(0, 10).forEach(week => { const row = document.createElement("tr"); const performanceClass = week["Performance Diagnostic"].toLowerCase().replace(/\s+/g, "-"); row.innerHTML = `<td>${week.Year}-${week.Week}</td><td><span class="performance-indicator ${performanceClass}">${week["Performance Diagnostic"]}</span></td><td>${week["What Went Well"] || "Standard performance"}</td><td>${week["What Could Be Improved"] || "Continue current practices"}</td>`; insightsTableBody.appendChild(row); }); } const dataTableBody = document.getElementById("dataTableBody"); if (dataTableBody) { dataTableBody.innerHTML = ""; results.finalResults.forEach(week => { const row = document.createElement("tr"); const performanceClass = week["Performance Diagnostic"].toLowerCase().replace(/\s+/g, "-"); const avgPaymentPerVisit = parseFloat(week["Actual Total Payments"]) / parseFloat(week["Visit Count"]); row.innerHTML = `<td>${week.Year}</td><td>${week.Week}</td><td>${formatCurrency(avgPaymentPerVisit)}</td><td>${formatCurrency(parseFloat(week["Actual Total Payments"]))}</td><td>${formatCurrency(parseFloat(week["Predicted Total Payments"]))}</td><td>${formatCurrency(parseFloat(week["Absolute Error"]))}</td><td><span class="performance-indicator ${performanceClass}">${week["Performance Diagnostic"]}</span></td><td>${week["Most Influential Performance Factors"]}</td>`; dataTableBody.appendChild(row); }); } } switchTab(tabName) { document.querySelectorAll(".tab-content").forEach(tab => { tab.style.display = "none"; }); const selectedTab = document.getElementById(`${tabName}Tab`); if (selectedTab) { selectedTab.style.display = "block"; } document.querySelectorAll(".nav-tab").forEach(tab => { tab.classList.remove("active"); if (tab.dataset.tab === tabName) { tab.classList.add("active"); } }); } async exportResults(format) { if (!this.analysisResults) { this.uiManager.showStatus("No analysis results to export.", "error"); return; } try { if (format === "csv") { await this.exportManager.exportToCSV(this.analysisResults); } else if (format === "pdf") { await this.exportManager.exportToPDF(this.analysisResults); } } catch (error) { console.error("Export error:", error); this.uiManager.showStatus("Error during export: " + error.message, "error"); } } resetApplication() { this.currentData = null; this.analysisResults = null; this.uiManager.reset(); this.chartManager.reset(); document.getElementById("runAnalysisBtn").disabled = true; } showError(title, message) { console.error(`❌ ${title}:`, message); this.uiManager.showStatus(message, "error"); } showConstructorError(error) { console.error("❌ Constructor error:", error); this.showError("Initialization Failed", error.message); } } document.addEventListener("DOMContentLoaded", () => { console.log("🚀 DOM loaded, initializing healthcare app..."); try { setTimeout(() => { console.log("📱 Creating HealthcareRevenueApp instance..."); window.healthcareApp = new HealthcareRevenueApp(); console.log("✅ Healthcare app created and assigned to window.healthcareApp"); }, 500); } catch (error) { console.error("❌ Failed to initialize healthcare app:", error); console.error("Error details:", error.stack); setTimeout(() => { const statusContainer = document.getElementById("statusContainer"); if (statusContainer) { statusContainer.innerHTML = `<div class="status-message error"><i class="fas fa-exclamation-circle"></i><span>Application failed to initialize: ${error.message}</span></div>`; } }, 100); } }); window.addEventListener("error", (e) => { console.error("🚨 Global error caught:", e.error); console.error("Error details:", { message: e.message, filename: e.filename, lineno: e.lineno, colno: e.colno, stack: e.error?.stack }); });
async readFile(file) { console.log("📖 Reading file:", file.name); return new Promise((resolve, reject) => { const reader = new FileReader(); reader.onload = (e) => { try { console.log("📊 Parsing Excel data..."); const data = new Uint8Array(e.target.result); const workbook = XLSX.read(data, { type: "array" }); const firstSheet = workbook.Sheets[workbook.SheetNames[0]]; const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 }); const headers = jsonData[0]; const rows = jsonData.slice(1); const processedData = rows.map(row => { const obj = {}; headers.forEach((header, index) => { obj[header] = row[index]; }); return obj; }); console.log("✅ File processed successfully"); resolve(processedData); } catch (error) { console.error("❌ Error processing file:", error); reject(new Error("Failed to process Excel file: " + error.message)); } }; reader.onerror = (error) => { console.error("❌ File reading error:", error); reject(new Error("Failed to read file: " + error.message)); }; reader.readAsArrayBuffer(file); }); }
